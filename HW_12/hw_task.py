# üìå –°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
# ‚óã –ò—Å–ø–æ–ª—å–∑—É—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –§–ò–û –Ω–∞ –ø–µ—Ä–≤—É—é –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É –∏
# –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤.
# ‚óã –ù–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–æ–ª–∂–Ω—ã –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ —Ñ–∞–π–ª–∞ CSV –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
# —ç–∫–∑–µ–º–ø–ª—è—Ä–∞. –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.
# ‚óã –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ (–æ—Ç 2 –¥–æ 5) –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
# —Ç–µ—Å—Ç–æ–≤ (–æ—Ç 0 –¥–æ 100).
# ‚óã –¢–∞–∫–∂–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–æ–±—â–∞—Ç—å —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ —Ç–µ—Å—Ç–∞–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
# –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ –ø–æ –æ—Ü–µ–Ω–∫–∞–º –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤–º–µ—Å—Ç–µ –≤–∑—è—Ç—ã—Ö.

import json
from string import ascii_letters
from subjects import Subjects
from random import randint


class Descript_name:
    S_RUS = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—å—ã—ä—ç—é—è-'
    S_RUS_UPPER = S_RUS.upper()

    def __set_name__(self, owner, name):
        self.param_name = '_' + name

    def __get__(self, instance, owner):
        return getattr(instance, self.param_name)
    
    def __set__(self, instance, value):
        self.verify_fio(value)
        setattr(instance, self.param_name, value)

    @classmethod   
    def verify_fio(cls, fio):
        if type(fio) != str:
            raise TypeError("–§–ò–û –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")
        
        if not fio.istitle():
            raise TypeError("–§–ò–û –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã")
 
        f = fio.split()
        if len(f) != 3:
            raise TypeError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∏ –§–ò–û")
 
        letters = ascii_letters + cls.S_RUS + cls.S_RUS_UPPER
        for s in f:
            if len(s) < 1:
                raise TypeError("–í –§–ò–û –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∏–º–≤–æ–ª")
            if len(s.strip(letters)) != 0:
                raise TypeError("–í –§–ò–û –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥–µ—Ñ–∏—Å")
            

class Student(Subjects):
    fio = Descript_name()
    def __init__(self, fio, *args, **kwargs):
        self.fio = fio
        super().__init__(*args, **kwargs)

    def rating_log(self):
        file_json = f'{self.fio}.json'
        with open(file_json, 'w', encoding='utf-8') as f:
            json.dump(self.subjects, f, ensure_ascii=False, indent=1)
        


if __name__ == "__main__":
    student_1 = Student("Ivanov Ivan Ivanovich", "HW_12\\subjects.csv")
    print(student_1.fio)
    print(*student_1.get_subjects_lst(), sep=", ")
    # student_1.add_grade('math', 5)
    # student_1.add_grade('math', 4)
    # print(*student_1.get_subject_grades('math'), sep=", ")
    print()
    for s in student_1.get_subjects_lst():
        for _ in range(randint(6, 12)):
            student_1.add_grade(s, randint(2, 5))
            student_1.add_test(s, randint(0, 100))
        print(s)
        print("–æ—Ü–µ–Ω–∫–∏")
        print(*student_1.get_subject_grades(s), sep=", ")
        print("—Ç–µ—Å—Ç—ã")
        print(*student_1.get_subject_tests(s), sep=", ")
        print()
    
    student_1.average_grade_tests()
    print()
    print(student_1.average_grade())
    print("–û–±—â–∏–π —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º")
    student_1.rating_log()
    

    student_2 = Student("Ivanov-Sidorov Ivan Ivanovich", "HW_12\\subjects.csv")

    # (—Ç–µ—Å—Ç) –≤—ã–¥–∞—é—Ç –æ—à–∏–±–∫–∏:
    # student_3 = Student("Ivanov ivan iVanovich", "HW_12\\subjects.csv")
    # student_4 = Student("Ivanov Ivan", "HW_12\\subjects.csv")
    # student_5 = Student("Ivanov@ Ivan Ivanovich", "HW_12\\subjects.csv")
    # student_4 = Student(6, "HW_12\\subjects.csv")

