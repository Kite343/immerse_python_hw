# üìå –ù–∞ —Å–µ–º–∏–Ω–∞—Ä–µ –ø—Ä–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã  –±—ã–ª —Å–æ–∑–¥–∞–Ω –ª–æ–≥–∏—Ä—É—é—â–∏–π
# –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä (9.3). –û–Ω —Å–æ—Ö—Ä–∞–Ω—è–ª –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—ë
# —Ä–∞–±–æ—Ç—ã –≤ —Ñ–∞–π–ª.
# üìå –ù–∞–ø–∏—à–∏—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –Ω–æ –≤–Ω—É—Ç—Ä–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ
# –º–æ–¥—É–ª—å logging.

import logging

logging.basicConfig(filename='task_2.log', encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)


def log(func):
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logger.info(f'–ê—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} {args}, {kwargs}, —Ä–µ–∑—É–ª—å—Ç–∞—Ç {result}')
        return result

    return wrapper


@log
def func(a, b=0, c=0):
    d = b ** 2 - 4 * a * c
    if d < 0:
        return None
    elif d == 0:
        return -b / (2 * a)
    else:
        return ((-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a))


if __name__ == '__main__':
    a = 1
    b = 8
    c = 3
    print(func(a, b, c))