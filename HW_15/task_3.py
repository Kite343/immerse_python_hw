# ๐ ะะพัะฐะฑะพัะฐะตะผ ะทะฐะดะฐัั 2.
# ๐ ะกะพััะฐะฝัะนัะต ะฒ ะปะพะณ ัะฐะนะป ัะฐะทะดะตะปัะฝะพ:
# โ ััะพะฒะตะฝั ะปะพะณะธัะพะฒะฐะฝะธั,
# โ ะดะฐัั ัะพะฑััะธั,
# โ ะธะผั ััะฝะบัะธะธ (ะฝะต ะดะตะบะพัะฐัะพัะฐ),
# โ ะฐัะณัะผะตะฝัั ะฒัะทะพะฒะฐ,
# โ ัะตะทัะปััะฐั.

import logging
from functools import wraps

FORMAT = '{levelname:<8} - {asctime}. {msg}'
logging.basicConfig(filename='task_3.log', format=FORMAT, style='{', encoding='utf-8', level=logging.INFO)
logger = logging.getLogger(__name__)

def log(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        result = func(*args, **kwargs)
        logger.info(f'ะัะณัะผะตะฝัั ััะฝะบัะธะธ {func.__name__} {args}, {kwargs}, ัะตะทัะปััะฐั {result}')
        return result

    return wrapper


@log
def func(a, b=0, c=0):
    d = b ** 2 - 4 * a * c
    if d < 0:
        return None
    elif d == 0:
        return -b / (2 * a)
    else:
        return ((-b + d ** 0.5) / (2 * a), (-b - d ** 0.5) / (2 * a))


if __name__ == '__main__':
    a = 1
    b = 8
    c = 3
    print(func(a, b, c))